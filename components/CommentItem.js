class CommentItem extends HTMLElement {
    constructor() {
        super();
        this.attachShadow({ mode: 'open' });
        this._commentData = null;
        this._currentUser = null;
        this._isLiked = false;
        this._repliesCollapsed = false;

    }

    set commentData(data) {
        this._commentData = data;

        if (this.isConnected) {
            this.render();
        }
    }

    get commentData() {
        return this._commentData;
    }

    set currentUser(user) {
        this._currentUser = user;

        if (this.isConnected && this._commentData) {
            this.render();
        }
    }

    get currentUser() {
        return this._currentUser;
    }

    // –°–µ—Ç—Ç–µ—Ä –¥–ª—è isLiked
    set isLiked(value) {
        const changed = this._isLiked !== !!value;
        this._isLiked = !!value;
        if (changed && this.isConnected) {
            this.render();
        }
    }

    get isLiked() {
        return this._isLiked;
    }

    connectedCallback() {

        this.render();
        this.addEventListeners();
    }

    formatDate(isoString) {
        if (!isoString) return '';
        const date = new Date(isoString);

        const options = {
            day: '2-digit', month: '2-digit', year: 'numeric',
            hour: '2-digit', minute: '2-digit'
        };
        return date.toLocaleString('ru-RU', options);
    }

    addEventListeners() {
        this.shadowRoot.addEventListener('click', (event) => {
            const target = event.target;
            const commentId = this._commentData?.id;
            if (!commentId) return;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –æ–¥–Ω–∞ –∏–∑ —Ñ–æ—Ä–º
            const isReplyFormOpen = !!this.shadowRoot.querySelector('.reply-form-inner');
            const isEditFormOpen = !!this.shadowRoot.querySelector('.edit-form-inner');
            const isActionFormOpen = isReplyFormOpen || isEditFormOpen;

            // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ --- 
            if (target.classList.contains('reply-btn')) {
                if (isActionFormOpen) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞
                this.dispatchEvent(new CustomEvent('reply-comment', { bubbles: true, composed: true, detail: { commentId: commentId, commentElement: this } }));
            }
            else if (target.classList.contains('edit-btn')) {
                if (isActionFormOpen) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞
                this.dispatchEvent(new CustomEvent('edit-comment', { bubbles: true, composed: true, detail: { commentId: commentId, commentElement: this } }));
            }
            else if (target.classList.contains('like-btn')) {
                if (isActionFormOpen) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª–∞–π–∫, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –æ—Ç–∫—Ä—ã—Ç–∞
                this.dispatchEvent(new CustomEvent('like-comment', { bubbles: true, composed: true, detail: { commentId: commentId } }));
            }
            else if (target.classList.contains('toggle-replies-btn')) {
                if (isActionFormOpen) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –æ—Ç–∫—Ä—ã—Ç–∞
                this._repliesCollapsed = !this._repliesCollapsed;
                this.render();
            }


        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è DOM-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã –æ—Ç–≤–µ—Ç–∞
    _createReplyForm() {
        const formContainer = document.createElement('div');
        formContainer.classList.add('reply-form-inner');

        const textarea = document.createElement('textarea');
        textarea.placeholder = `–û—Ç–≤–µ—Ç–∏—Ç—å ${this._commentData?.author || ''}...`;
        textarea.value = `@${this._commentData?.author || ''}, `;

        // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–ª–æ–∂–µ–Ω–∏—è
        const previewBlock = document.createElement('div');
        previewBlock.style.cssText = `
            margin-top: 10px; 
            max-width: 100px; 
            display: none; 
            position: relative;
        `;

        const previewImage = document.createElement('img');
        previewImage.style.cssText = `
            max-width: 100%; 
            max-height: 80px; 
            border-radius: 4px; 
            border: 1px solid var(--comment-form-border-color, #ccc);
            cursor: pointer;
        `;

        const removeButton = document.createElement('div');
        removeButton.innerHTML = '‚úï';
        removeButton.title = '–£–¥–∞–ª–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ';
        removeButton.style.cssText = `
            position: absolute;
            top: -8px;
            right: -8px;
            background-color: rgba(255, 255, 255, 0.8);
            color: #dc3545;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-weight: bold;
            border: 1px solid #dc3545;
            font-size: 14px;
        `;

        previewBlock.appendChild(previewImage);
        previewBlock.appendChild(removeButton);

        // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
        const actionsGroup = document.createElement('div');
        actionsGroup.style.cssText = `
            display: flex;
            align-items: center;
            margin-top: 10px;
        `;

        // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –∫–Ω–æ–ø–æ–∫ —Ñ–æ—Ä–º—ã
        const buttonGroup = document.createElement('div');
        buttonGroup.classList.add('reply-form-actions');

        const submitButton = document.createElement('button');
        submitButton.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç';
        submitButton.classList.add('submit-reply-btn');
        submitButton.style.cssText = `
            padding: 6px 12px;
            font-size: 0.9em;
            border-radius: var(--comment-form-border-radius, 4px);
            cursor: pointer;
            border: none;
            margin-right: 10px;
            background-color: var(--comment-form-submit-button-bg, #007bff);
            color: var(--comment-form-submit-button-color, white);
        `;

        const cancelButton = document.createElement('button');
        cancelButton.textContent = '–û—Ç–º–µ–Ω–∞';
        cancelButton.classList.add('cancel-reply-btn');
        cancelButton.style.cssText = `
            padding: 6px 12px;
            font-size: 0.9em;
            border-radius: var(--comment-form-border-radius, 4px);
            cursor: pointer;
            border: none;
            margin-right: 10px;
            background-color: var(--comment-form-cancel-button-bg, #f8f9fa);
            color: var(--comment-form-cancel-button-color, #333);
            border: 1px solid var(--comment-form-cancel-button-border, #ccc);
        `;

        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        const attachmentLink = document.createElement('div');
        attachmentLink.style.cssText = `
            color: var(--comment-action-button-color, #007bff);
            cursor: pointer;
            margin-left: 10px;
            font-size: 0.9em;
            position: relative;
            display: flex;
            align-items: center;
        `;
        attachmentLink.innerHTML = '<span>üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª</span>';

        const fileInput = document.createElement('input');
        fileInput.type = 'file';
        fileInput.accept = 'image/*,.gif';
        fileInput.title = '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ GIF';
        fileInput.style.cssText = `
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 0;
            cursor: pointer;
        `;
        attachmentLink.appendChild(fileInput);

        buttonGroup.appendChild(submitButton);
        buttonGroup.appendChild(cancelButton);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ —Å—Å—ã–ª–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
        actionsGroup.appendChild(buttonGroup);
        actionsGroup.appendChild(attachmentLink);

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å—é —Ñ–æ—Ä–º—É
        formContainer.appendChild(textarea);
        formContainer.appendChild(previewBlock);
        formContainer.appendChild(actionsGroup);

        // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–∏—è
        let currentAttachment = null;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        fileInput.addEventListener('change', async (event) => {
            const file = event.target.files[0];
            if (!file) return;

            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 5MB)
                if (file.size > 5 * 1024 * 1024) {
                    alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB');
                    fileInput.value = '';
                    return;
                }

                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ Base64
                const base64String = await this._fileToBase64(file);

                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–≤—å—é
                previewImage.src = base64String;
                previewBlock.style.display = 'block';

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ
                currentAttachment = base64String;
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', error);
                alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.');
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–∏—è
        removeButton.addEventListener('click', () => {
            previewBlock.style.display = 'none';
            previewImage.src = '';
            fileInput.value = '';
            currentAttachment = null;
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏/–æ—Ç–º–µ–Ω—ã
        formContainer.addEventListener('click', (event) => {
            const target = event.target;
            if (target.classList.contains('submit-reply-btn')) {
                const text = textarea.value.trim();
                if (text && this._commentData) {
                    this.dispatchEvent(new CustomEvent('add-reply', {
                        bubbles: true,
                        composed: true,
                        detail: {
                            parentId: this._commentData.id,
                            text: text,
                            attachment: currentAttachment
                        }
                    }));
                    this._hideReplyForm();
                }
            } else if (target.classList.contains('cancel-reply-btn')) {
                this._hideReplyForm(); // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
            }
        });

        // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        setTimeout(() => textarea.focus(), 0);

        return formContainer;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –≤ Base64
    _fileToBase64(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = () => resolve(reader.result);
            reader.onerror = error => reject(error);
        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ä–º—ã –æ—Ç–≤–µ—Ç–∞
    showReplyForm() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (this.shadowRoot.querySelector('.edit-form-inner')) {
            this.disableEditMode();
        }

        const replyFormContainer = this.shadowRoot.querySelector('.reply-form');
        const actionsElement = this.shadowRoot.querySelector('.actions'); // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π

        if (replyFormContainer && actionsElement) {
            // –°–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            actionsElement.style.display = 'none';

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –æ—Ç–≤–µ—Ç–∞
            replyFormContainer.innerHTML = '';
            const form = this._createReplyForm();
            replyFormContainer.appendChild(form);
            replyFormContainer.style.display = 'block';
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∏ –æ—á–∏—Å—Ç–∫–∏ —Ñ–æ—Ä–º—ã –æ—Ç–≤–µ—Ç–∞
    _hideReplyForm() {
        const replyFormContainer = this.shadowRoot.querySelector('.reply-form');
        const actionsElement = this.shadowRoot.querySelector('.actions'); // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π

        if (replyFormContainer) {
            replyFormContainer.style.display = 'none';
            replyFormContainer.innerHTML = '';
        }
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        if (actionsElement) {
            actionsElement.style.display = 'flex';
        }
    }

    // --- –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ü–ª–∞–Ω —Å –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ñ–æ—Ä–º–æ–π) --- 
    _createEditForm() {
        const formContainer = document.createElement('div');
        formContainer.classList.add('edit-form-inner');
        const textarea = document.createElement('textarea');
        textarea.value = this._commentData?.text || '';
        textarea.placeholder = '–í–≤–µ–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç...';
        textarea.rows = 3;
        const buttonGroup = document.createElement('div');
        buttonGroup.classList.add('edit-form-actions');

        const saveButton = document.createElement('button');
        saveButton.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
        saveButton.classList.add('save-edit-btn');

        const cancelButton = document.createElement('button');
        cancelButton.textContent = '–û—Ç–º–µ–Ω–∞';
        cancelButton.classList.add('cancel-edit-btn');
        cancelButton.style.marginLeft = '10px';

        buttonGroup.appendChild(saveButton);
        buttonGroup.appendChild(cancelButton);

        formContainer.appendChild(textarea);
        formContainer.appendChild(buttonGroup);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        formContainer.addEventListener('click', (event) => {
            const target = event.target;
            if (target.classList.contains('save-edit-btn')) {
                const newText = textarea.value.trim();
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
                this.dispatchEvent(new CustomEvent('save-edit', {
                    bubbles: true, composed: true,
                    detail: { commentId: this._commentData.id, newText: newText }
                }));
                this.disableEditMode();
            } else if (target.classList.contains('cancel-edit-btn')) {
                this.disableEditMode();
            }
        });

        setTimeout(() => textarea.focus(), 0);
        return formContainer;
    }

    enableEditMode() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ —Ñ–æ—Ä–º–∞ –æ—Ç–≤–µ—Ç–∞
        if (this.shadowRoot.querySelector('.reply-form-inner')) {
            this._hideReplyForm(); // –°–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –æ—Ç–≤–µ—Ç–∞
        }

        const textElement = this.shadowRoot.querySelector('.text');
        const actionsElement = this.shadowRoot.querySelector('.actions');

        if (!textElement || !actionsElement || !this._commentData) return;
        // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if (this.shadowRoot.querySelector('.edit-form-inner')) return;

        textElement.style.display = 'none';
        actionsElement.style.display = 'none';

        const editForm = this._createEditForm();
        textElement.parentNode.insertBefore(editForm, textElement.nextSibling);
    }

    disableEditMode() {
        const textElement = this.shadowRoot.querySelector('.text');
        const actionsElement = this.shadowRoot.querySelector('.actions');
        const editForm = this.shadowRoot.querySelector('.edit-form-inner');

        if (editForm) {
            editForm.remove();
        }
        if (textElement) {
            textElement.style.display = 'block';
        }
        if (actionsElement) {
            actionsElement.style.display = 'flex';
        }
        // –ù–µ –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, —Ç–∞–∫ –∫–∞–∫ —Ñ–æ—Ä–º–∞ —É–¥–∞–ª—è–µ—Ç—Å—è
        // –∏ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–µ —Ç–µ–∫—Å—Ç –≤–æ–∑—å–º–µ—Ç—Å—è –∏–∑ commentData
        delete this._originalText; // –£–±–∏—Ä–∞–µ–º –Ω–µ–Ω—É–∂–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
    }
    // --- –ö–æ–Ω–µ—Ü –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---

    // --- –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–µ–∂–µ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ---
    isCommentNew(timestamp) {
        if (!timestamp) return false;

        const commentDate = new Date(timestamp);
        const currentDate = new Date();
        // –†–∞–∑–Ω–∏—Ü–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        const timeDiff = currentDate - commentDate;
        // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        const oneDayInMs = 24 * 60 * 60 * 1000;

        // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–æ–≤—ã–º, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
        return timeDiff < oneDayInMs;
    }

    render() {
        if (!this._commentData) {
            this.shadowRoot.innerHTML = `<style>:host{ display: block; padding: 10px; } </style><div>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è...</div>`;
            return;
        }

        const { id, author, text, timestamp, likes, isEdited, editedTimestamp, attachment } = this._commentData;
        const displayTimestamp = isEdited ? editedTimestamp : timestamp;
        const formattedDate = this.formatDate(displayTimestamp);
        const isOwnComment = this.currentUser === author;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–∏–∑–Ω—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ timestamp
        const isNew = this.isCommentNew(timestamp);

        this.setAttribute('data-comment-id', id);

        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–µ
        // (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ render –≤—ã–∑–≤–∞–Ω –¥–æ disableEditMode)
        this.shadowRoot.querySelector('.edit-form-inner')?.remove();

        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ shadow DOM
        this.shadowRoot.innerHTML = '';

        // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        const template = document.getElementById('comment-item-template');
        if (!template) {
            console.error('Template not found: comment-item-template');
            return;
        }

        // –ö–ª–æ–Ω–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–±–ª–æ–Ω–∞
        const instance = template.content.cloneNode(true);

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —à–∞–±–ª–æ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏
        const newBadge = instance.querySelector('#new-badge');
        const authorElement = instance.querySelector('#author');
        const dateElement = instance.querySelector('#date');
        const editedMark = instance.querySelector('#edited-mark');
        const textElement = instance.querySelector('#text');
        const likesElement = instance.querySelector('#likes');
        const editButton = instance.querySelector('.edit-btn');
        const likeButton = instance.querySelector('.like-btn');
        const repliesContainer = instance.querySelector('.replies');

        // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏–π
        const attachmentContainer = instance.querySelector('#attachment-container');
        const attachmentImg = instance.querySelector('#attachment-img');

        // –ù–æ–≤–∏–∑–Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        if (isNew) {
            newBadge.style.display = 'inline-block';
        } else {
            newBadge.style.display = 'none';
        }

        // –ê–≤—Ç–æ—Ä –∏ –¥–∞—Ç–∞
        authorElement.textContent = author;
        dateElement.textContent = formattedDate;

        // –û—Ç–º–µ—Ç–∫–∞ –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        if (isEdited) {
            editedMark.style.display = 'inline';
        } else {
            editedMark.style.display = 'none';
        }

        // –¢–µ–∫—Å—Ç –∏ –ª–∞–π–∫–∏
        textElement.textContent = text;
        likesElement.textContent = likes;

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if (attachment) {
            attachmentContainer.style.display = 'block';
            attachmentImg.src = attachment;
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π alt-—Ç–µ–∫—Å—Ç
            attachmentImg.alt = `–í–ª–æ–∂–µ–Ω–∏–µ –æ—Ç ${author}`;

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
            attachmentImg.addEventListener('click', (event) => {
                event.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ
                this.dispatchEvent(new CustomEvent('open-image', {
                    bubbles: true,
                    composed: true,
                    detail: {
                        imageUrl: attachment,
                        commentId: id
                    }
                }));
            });
        }

        // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (!isOwnComment) {
            editButton.hidden = true;
        }

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–π–∫–∞
        if (this._isLiked) {
            likeButton.classList.add('liked');
            likeButton.setAttribute('aria-pressed', 'true');
        } else {
            likeButton.classList.remove('liked');
            likeButton.setAttribute('aria-pressed', 'false');
        }

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç–∏ replies
        if (this._repliesCollapsed) {
            repliesContainer.classList.add('replies-collapsed');
        } else {
            repliesContainer.classList.remove('replies-collapsed');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –≤ shadow DOM
        this.shadowRoot.appendChild(instance);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        let replyCount = 0;
        const checkRepliesInterval = setInterval(() => {
            const repliesSlot = this.shadowRoot.querySelector('slot[name="replies"]');
            if (repliesSlot) {
                replyCount = repliesSlot.assignedNodes({ flatten: true }).filter(node => node.nodeName === 'COMMENT-ITEM').length;
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–ª–æ—Ç –∏ –∫–æ–ª-–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ > 1
                this._updateToggleRepliesButton(replyCount);
                clearInterval(checkRepliesInterval); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            } else if (this.shadowRoot.isConnected === false) {
                // –ï—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω –¥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Å–ª–æ—Ç–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                clearInterval(checkRepliesInterval);
            }
        }, 50); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ—á–∏—Å—Ç–∫–∏, –µ—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –±—É–¥–µ—Ç –±—ã—Å—Ç—Ä–æ —É–¥–∞–ª–µ–Ω
        setTimeout(() => clearInterval(checkRepliesInterval), 2000);
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
    _updateToggleRepliesButton(replyCount) {
        const toggleContainer = this.shadowRoot.querySelector('.toggle-replies');
        const toggleButton = this.shadowRoot.querySelector('.toggle-replies-btn');

        if (!toggleContainer || !toggleButton) return;

        if (replyCount > 1) {
            toggleContainer.style.display = 'block';
            if (this._repliesCollapsed) {
                toggleButton.textContent = `–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ—Ç–≤–µ—Ç—ã (${replyCount}) ‚Üì`;
            } else {
                toggleButton.textContent = '–°–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç—ã ‚Üë';
            }
        } else {
            toggleContainer.style.display = 'none';
        }
    }
}

customElements.define('comment-item', CommentItem); 